:root {
  --visuAspectRatio: 16/9;
  --visuMaxWidth: 100vw;
  --visuMaxHeight: 80vh;
  --visuWidth: min(var(--visuMaxWidth), calc(var(--visuMaxHeight) * var(--visuAspectRatio)));

  --GRIDSIZE_AS_PARTS_FROM_WIDTH: 32;
  --iconSize: calc(var(--visuWidth) / var(--GRIDSIZE_AS_PARTS_FROM_WIDTH));
  --fontSizeIconSignals: calc(var(--iconSize) / 3);
  --inputTextWidth: calc(2 * var(--iconSize));

  --controlsWidthOffset: 18px; /*such as scrollbar or input[type=number] controls*/

  /*Colors*/
  --magenta: hsl(334, 74%, 44%);
  --cyan: hsl(194, 74%, 44%);
  --purple: hsl(264, 74%, 44%);
  --yellow: hsl(50, 74%, 44%);
  --green: hsl(120, 74%, 44%);
  --darkestGrey: hsl(249, 10%, 13%);
  --darkerGrey: hsl(249, 10%, 18%);
  --darkGrey: hsl(249, 10%, 23%);
  --grey: hsl(249, 10%, 28%);
  --lightGrey: hsl(249, 10%, 33%);
  --lighterGrey: hsl(249, 10%, 38%);
  --lightestGrey: hsl(249, 10%, 43%);
  /*
  */
}

* {
  padding: 0;
  margin: 0;
}

body {
  background-color: var(--darkerGrey);
  color: white;
  display: grid;
  grid-template-areas: 'signalTable visuContainer attributeTable'
                       'signalTable editorTools   attributeTable';
  grid-template-columns: max-content auto max-content;
  grid-template-rows: auto max-content;
  /*
  justify-items: center;
  align-items: center;
  */
}

.visuContainer {
  grid-area: visuContainer;
  justify-self: center;
}

.signalTable {
  grid-area: signalTable;
  display: grid;
  grid-template-columns: max-content max-content;
  background-color: var(--grey);
  height: min-content;
  max-height: 100vh;
  overflow-y: auto;
  padding-right: var(--controlsWidthOffset);
  overflow-x: hidden;
}
.inputAddSignal {
  grid-column: span 2;
  width: calc(var(--inputTextWidth) + 2ch);
}

.attributeTable {
  grid-area: attributeTable;
  display: grid;
  grid-template-columns: max-content;
  background-color: var(--grey);
  height: min-content;
  max-height: 100vh;
  overflow-y: auto;
  overflow-x: hidden;
}


[stil = "sollwert"] input {
  color: white;
  background-color: var(--cyan);
}
[stil = "grenzwert"] input {
  color: white;
  background-color: var(--magenta);
}

.divVisu {
  background-color: var(--darkestGrey);
  width: var(--visuWidth);
  aspect-ratio: var(--visuAspectRatio);
  position: relative;
}
.divVisu[edit-mode] {
  cursor: crosshair;
}

.visuTabs {
  width: var(--visuWidth);
}
.visuTab {
  cursor: pointer;
  float: left;
  width: min-content;
  background-color: var(--darkGrey);
  border-bottom-left-radius: calc(var(--iconSize)/4);
  border-bottom-right-radius: calc(var(--iconSize)/4);
  padding: 0 calc(var(--iconSize)/4);
}
.visuTab.active {
  background-color: var(--darkestGrey);
}

.divReloadLiveData {
  width: var(--visuWidth);
  display: grid;
  grid-template-areas: 'editMode reloadLiveData'
                       '.        timeStamp';
}
.cbEditModeContainer {
  grid-area: editMode;
}
.cbReloadLiveDataContainer {
  grid-area: reloadLiveData;
  justify-self: end;
}
.liveDataTimeStamp {
  grid-area: timeStamp;
  justify-self: end;
}

.bgSVG:not(.active) {
  display: none;
}

.divIcon {
  position: absolute;
  box-sizing: border-box;
  display: grid;
  grid-auto-rows: 1fr;
  /*
  grid-auto-columns: 1fr;
  min-height: var(--iconSize);
  min-width: var(--iconSize);
  */
  width: var(--iconSize);
  height: var(--iconSize);
}
.divVisu .visuItem[icon] {
  display: grid;
  grid-template-rows: 1fr;
}
.divVisu .visuItem[icon]:not([icon = "button"]):not([icon = "temperatur"]):not([icon = "waermetauscher"]) {
  width: var(--iconSize);
  height: var(--iconSize);
}
.divVisu .visuItem[icon = "waermetauscher"] {
  width: var(--iconSize);
  height: calc(2 * var(--iconSize));
}
.divVisu .visuItem[icon = "temperatur"] {
  width: calc(var(--iconSize)/2);
  height: calc(var(--iconSize)/2);
}
.divVisu .visuItem[icon = "button"]:not([rotation]) input {
  min-height: var(--iconSize);
}


.divVisu [rotation = "90"]:not([icon = "button"]) {
  rotate: 90deg;
}
.divVisu [rotation = "180"] {
  rotate: 180deg;
}
.divVisu [rotation = "270"]:not([icon = "button"]) {
  rotate: 270deg;
}
.divVisu [rotation = "90"][icon = "button"] input{
  writing-mode: sideways-rl;
  min-width: var(--iconSize);
}
.divVisu [rotation = "270"][icon = "button"] input{
  writing-mode: sideways-lr;
  min-width: var(--iconSize);
}

.visuItem [type = "text"] {
  box-sizing: border-box;
  width: var(--inputTextWidth);
  height: calc(var(--iconSize)/2);
}
/*********************EditorTools*********************/
.divEditSignal {
  position: absolute;
  display: grid;
  grid-template-columns: max-content min-content;
  background-color: var(--darkerGrey);
}
.divEditSignal label{
  text-align: end;
}
#tmpInputEl {
  position: absolute;
  cursor: text;
  z-index: 99;
}

.editorTools {
  grid-area: editorTools;
  grid-auto-flow: column;
  display: grid;
  align-items: center;
  justify-items: center;
}
.editorTools fieldset {
  margin: 5px;
  padding: 2px;
}
.strokeWidth {
  width: calc(3ch + var(--controlsWidthOffset));
}
/*********************GenericAttributes*********************/
[text-align = "center"] * {
  text-align: center;
}
[text-align = "end"] * {
  text-align: end;
}

[hidden] {
  visibility: hidden;
}
[cloaked] {
  display: none;
}
[selected] {
  outline: 1px solid var(--green);
}
[highlighted] {
  outline: 1px solid var(--yellow);
}
[strikethrough] {
  text-decoration: line-through;
}
/*********************CursorStylez*********************/
[draggable = "true"] * {
  cursor: grab;
}
[dragging] {
  cursor: grabbing;
}
summary,
input:not([type="text"]):not([type="number"]),
label[for],
select {
  cursor: pointer;
}

.divVisu:not([edit-mode]) input[type="text"] {
  cursor: default;
}
/*
.divVisu .divSignals input[type="button"] {
  cursor: text;
}
*/
/*********************FlameStyle*********************/
.flameLayer {
  aspect-ratio: 1;
  bottom: 15%;
  position:absolute;
  border-bottom-right-radius: 50%;
  border-bottom-left-radius: 50%;
  border-top-left-radius: 50%;
  transform:rotate(-45deg);
}
.flameLayer.red {
  left: 15%;
  width: 70%;
  background:OrangeRed;
  box-shadow: 0 0 calc(.07*var(--iconSize)) calc(.06*var(--iconSize)) OrangeRed;    /*box-shadow akzeptiert keine [%] => umständliche berechnung!*/
}
.flameLayer.orange {
  left: 22%; 
  width: 56%;
  background:orange;
  box-shadow: 0 0 calc(.13*var(--iconSize)) calc(.06*var(--iconSize)) orange;   /*box-shadow akzeptiert keine [%] => umständliche berechnung!*/
}
.flameLayer.yellow {
  left: 29%; 
  width: 42%;
  background:gold;
  box-shadow: 0 0 calc(.13*var(--iconSize)) calc(.06*var(--iconSize)) gold;   /*box-shadow akzeptiert keine [%] => umständliche berechnung!*/
}
.flameLayer.white {
  left: 29%; 
  bottom: 10%;
  width: 42%;
  background:white;
  box-shadow: 0 0 calc(.13*var(--iconSize)) calc(.06*var(--iconSize)) white;   /*box-shadow akzeptiert keine [%] => umständliche berechnung!*/
}
.flameLayer.blue {
  left: 46%; 
  bottom: 10%;
  width: 4%;
  background:SlateBlue;
  opacity: 0.7;
  box-shadow: 0 0 calc(.13*var(--iconSize)) calc(.06*var(--iconSize)) SlateBlue;   /*box-shadow akzeptiert keine [%] => umständliche berechnung!*/
}
/*********************Animations*********************/
.visuItem[animate][animation = "flicker"] .betrieb {
  animation: flicker 3ms ease-in 200ms infinite alternate;
}
@keyframes flicker {
  0%   {transform: rotate(-1deg) scale(.75,.8);}
  20%  {transform: rotate(1deg) scale(.8,.8);}
  40%  {transform: rotate(-1deg) scale(.75,.8);}
  60%  {transform: rotate(1deg) scale(.8,.95);}
  80%  {transform: rotate(-2deg) scale(.75,.75);}
  100% {transform: rotate(1deg) scale(.8,.8);}
}

.visuItem[animate][animation = "spin"] .betrieb {
  animation: spin 2s linear infinite;
}

@keyframes spin {
  to {transform: rotate(1turn);}
}

.visuItem[animate][animation = "blink"] .betrieb {
  animation: blink 2s steps(4, start) infinite;
}
@keyframes blink {
  to {visibility: hidden;}
}

@keyframes btnBlink {
  from {
      color: var(--lightgray);
      background: var(--magenta);
  }
  to {
      color: var(--magenta);
      background: var(--lightgray);
  }
}